{
  "name": "piswitch",
  "version": "1.2.3",
  "repository": {
    "type": "git",
    "url": "git@github.com:tjanson/PiSwitch.git"
  },
  "description": "Use your Raspberry Pi to control 433 MHz RC power sockets. Inspired by RC-Switch for Arduino.",
  "main": "piswitch.js",
  "dependencies": {
    "wiring-pi": "^2.0.0"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "raspberrypi",
    "raspberry",
    "pi",
    "gpio",
    "rc",
    "rcswitch",
    "rc-switch",
    "outlet"
  ],
  "author": {
    "name": "tjanson"
  },
  "license": "LGPL-3.0+",
  "readme": "PiSwitch\n========\n\nUse your Raspberry Pi to control 433 MHz RC power sockets.\nInspired by [RC-Switch][rcs] for Arduino.\n\nPiSwitch is also available as an [`npm` package][npm].\n\nI'm not able to test all code types, so if you encounter a problem, let me\nknow. Issues and PRs welcome.\n\n[rcs]: https://code.google.com/p/rc-switch/\n[npm]: https://www.npmjs.org/package/piswitch\n\nFeatures\n--------\n\n* compatibility with RC-Switch, i.e., supports the same devices\n* code input in binary, tristate, and the following schemes:\n     - 10 DIP switches (matching the regular expression `/^[01]{10}$/`)\n     - two (often rotary) switches with 4 positions (`/^[1-4]{2}$/`)\n     - Intertechno (`/^[a-p][1-4]{2}$/`)\n     - REV (`/^[a-d][123]$/`)\n* easily extendable translation procedure with [JSON dictionary][dict]\n\n[dict]: https://github.com/tjanson/PiSwitch/blob/master/dict.js\n\nInstallation & Usage\n--------------------\n\n### Hardware\n\nAttach your 433 MHz transmitter to VCC, GND, and a pin of your liking.\n\n### Software\n\n1. Run `npm install` in the project directory to install PiSwitch’s dependencies.\n\n2. Choose between running as PiSwitch with `root` privileges or using the\n   WiringPi [`gpio`][gpio-util] utility to `export` the GPIO pins, making\n   them accessible to non-root users.\n\n   (This is precisely the choice you have to make when using\n   [Wiring Pi’s setup methods][wpi-setup], because that *is* what’s used.)\n\n   Running as an unprivileged user is recommended and the default, so please\n   have a look at the `gpio` util’s documentation.\n   The relevant command is `gpio export <pin> out` (BCM numbering).\n   (Take a look at `gpio readall` and [Gadgetoid’s Pi pinout chart][pinout] for\n   pin numbers, both are really handy.)\n   \n   If you would rather run as root, pass `mode: 'gpio'` during setup (see below).\n\n3. Now take a look at [`example.js`][example-js]. Note:\n   * `setup()` must be called to initialize WiringPi. You'll probably want to\n     to pass key–value option pairs (e.g., `{ pulseLength: 350, pin: 27 }`) that\n     match your setup. See [`config.js`][config-js].\n\n   * `send(code, type, off)` is used to transmit an RC code, where\n     - `code` matches one of the input schemes, e.g., `'ff0f00fffff0'` or `'a3'`\n     - `type` is one of {`'binary'`, `'tristate'`, `'dip'`, `'rotary'`,\n       `'intertechno'`, `'rev'`} (default: `'binary'`)\n     - `off` is `true` to send an `off` code (default: `false`, i.e., switch on)\n     \n     Some examples:\n     - `send('b2', 'rev')` turns on the \"B2\" power socket of a system using REV\n       naming\n     - `send('b2', 'rev', true)` turns *off* the same socket\n     - `send('010100010000010101010101')`, `send('ff0f00ffffff', 'tristate')`,\n       and `send('0010110000', 'dip')` are all translated to the same transmission\n\nIf you have questions or run into problems, please file an issue. :)\n\n[wpi-setup]:  http://wiringpi.com/reference/setup/\n[gpio-util]:  http://wiringpi.com/the-gpio-utility/\n[pinout]:     http://pi.gadgetoid.com/pinout/gpio\n[example-js]: https://github.com/tjanson/PiSwitch/blob/master/example.js\n[config-js]:  https://github.com/tjanson/PiSwitch/blob/master/config.js\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/tjanson/PiSwitch/issues"
  },
  "_id": "piswitch@1.2.3",
  "_from": "piswitch@^1.0.3"
}
